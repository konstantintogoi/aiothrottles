{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"aiothrottles Documentation : https://konstantintogoi.github.io/aiothrottles Source Code : https://github.com/KonstantinTogoi/aiothrottles aiothrottles synchronization primitives are designed to be extension to asyncio synchronization primitives . Usage Throttle implements a rate limiting for asyncio task. A throttle can be used to guarantee limited access to a shared resources. The preferred way to use a Throttle is an async with statement: throttle = Throttle ( '3/s' ) # ... later async with throttle : # access shared state which is equivalent to: throttle = Throttle ( '3/s' ) # ... later await throttle . acquire () try : # access shared state finally : throttle . release () A call rate is determined by the rate argument. Pass the rate in the following formats: \"{integer limit}/{unit time}\" \"{limit's numerator}/{limit's denominator}{unit time}\" rate examples: 4/s , 5/m , 6/h , 7/d 1/second , 2/minute , 3/hour , 4/day 1/3s , 12/37m , 1/5h , 8/3d Installation pip install aiothrottles or python setup.py install Supported Python Versions Python 3.6, 3.7, 3.8 and 3.9 are supported.","title":"Home"},{"location":"#aiothrottles","text":"Documentation : https://konstantintogoi.github.io/aiothrottles Source Code : https://github.com/KonstantinTogoi/aiothrottles aiothrottles synchronization primitives are designed to be extension to asyncio synchronization primitives .","title":"aiothrottles"},{"location":"#usage","text":"Throttle implements a rate limiting for asyncio task. A throttle can be used to guarantee limited access to a shared resources. The preferred way to use a Throttle is an async with statement: throttle = Throttle ( '3/s' ) # ... later async with throttle : # access shared state which is equivalent to: throttle = Throttle ( '3/s' ) # ... later await throttle . acquire () try : # access shared state finally : throttle . release () A call rate is determined by the rate argument. Pass the rate in the following formats: \"{integer limit}/{unit time}\" \"{limit's numerator}/{limit's denominator}{unit time}\" rate examples: 4/s , 5/m , 6/h , 7/d 1/second , 2/minute , 3/hour , 4/day 1/3s , 12/37m , 1/5h , 8/3d","title":"Usage"},{"location":"#installation","text":"pip install aiothrottles or python setup.py install","title":"Installation"},{"location":"#supported-python-versions","text":"Python 3.6, 3.7, 3.8 and 3.9 are supported.","title":"Supported Python Versions"},{"location":"getting_started/","text":"Getting Started Installation If you use pip, just type pip install aiothrottles You can install from the source code like git clone https://github.com/KonstantinTogoi/aiothrottles.git cd aiothrottles python setup.py install Examples of usage awaitable Use of aiothrottles.Throttle as awaitable object: >>> import time >>> from aiothrottles import Throttle >>> >>> throttle = Throttle ( rate = '1/s' ) >>> >>> async def foo ( n ): ... print ( n , time . time ()) ... >>> for i in range ( 5 ): ... await throttle ... await foo ( i ) ... throttle . release () ... 0 1563275828.253736 1 1563275829.2547996 2 1563275830.2562528 3 1563275831.257302 4 1563275832.2587304 context manager Use of aiothrottles.Throttle as context: >>> import time >>> from aiothrottles import Throttle >>> >>> throttle = Throttle ( rate = '1/s' ) >>> >>> async def foo ( n ): ... print ( n , time . time ()) ... >>> for i in range ( 5 ): ... async with throttle : ... await foo ( i ) ... 0 1563275898.6722345 1 1563275899.673589 2 1563275900.6750457 3 1563275901.6763387 4 1563275902.6777005 decorator Use of aiothrottles.Throttle as decorator for coroutines: >>> import time >>> from aiothrottles import throttle # Throttle alias >>> >>> @throttle ( rate = '1/s' ) ... async def foo ( n ): ... print ( n , time . time ()) ... >>> for i in range ( 5 ): ... await foo ( i ) ... 0 1563272100.4413373 1 1563272101.4427333 2 1563272102.4441307 3 1563272103.445542 4 1563272104.4468124","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"getting_started/#installation","text":"If you use pip, just type pip install aiothrottles You can install from the source code like git clone https://github.com/KonstantinTogoi/aiothrottles.git cd aiothrottles python setup.py install","title":"Installation"},{"location":"getting_started/#examples-of-usage","text":"","title":"Examples of usage"},{"location":"getting_started/#awaitable","text":"Use of aiothrottles.Throttle as awaitable object: >>> import time >>> from aiothrottles import Throttle >>> >>> throttle = Throttle ( rate = '1/s' ) >>> >>> async def foo ( n ): ... print ( n , time . time ()) ... >>> for i in range ( 5 ): ... await throttle ... await foo ( i ) ... throttle . release () ... 0 1563275828.253736 1 1563275829.2547996 2 1563275830.2562528 3 1563275831.257302 4 1563275832.2587304","title":"awaitable"},{"location":"getting_started/#context-manager","text":"Use of aiothrottles.Throttle as context: >>> import time >>> from aiothrottles import Throttle >>> >>> throttle = Throttle ( rate = '1/s' ) >>> >>> async def foo ( n ): ... print ( n , time . time ()) ... >>> for i in range ( 5 ): ... async with throttle : ... await foo ( i ) ... 0 1563275898.6722345 1 1563275899.673589 2 1563275900.6750457 3 1563275901.6763387 4 1563275902.6777005","title":"context manager"},{"location":"getting_started/#decorator","text":"Use of aiothrottles.Throttle as decorator for coroutines: >>> import time >>> from aiothrottles import throttle # Throttle alias >>> >>> @throttle ( rate = '1/s' ) ... async def foo ( n ): ... print ( n , time . time ()) ... >>> for i in range ( 5 ): ... await foo ( i ) ... 0 1563272100.4413373 1 1563272101.4427333 2 1563272102.4441307 3 1563272103.445542 4 1563272104.4468124","title":"decorator"}]}